openapi: 3.0.0
info:
  title: WASAPhoto APIs
  description: WASAPhoto app backend REST APIs
  version: '3'
servers:
  - url: http://localhost:3000
tags:
  - name: "doLogin"
    description: Endpoint for login operation
    
  - name: "Followers"
    description: Endpoints for following or unfollowing an user
  
  - name: "Ban"
    description: Endpoints for managing the banned users
    
  - name: "Photo"
    description: Endpoints for managing the photos 
    
  - name: "Like"
    description: Endpoints for managing the likes of the photos
    
  - name: "Comment"
    description: Endpoints for managing the comment of the photos

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs.
      
  parameters:
    UserID:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: userId
      in: path
      required: true
      description: User ID
    FollowedId:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: followedId
      in: path
      required: true
      description: User followed Id
    BannedId:
      schema:
        type: integer
        example: 44
        readOnly: true
      name: bannedId
      in: path
      required: true
      description: Banned user Id
    PhotoId:
      schema:
        type: integer
        example: 22
        readOnly: true
      name: photoId
      in: path
      required: true
      description: Photo id
  schemas:
    User:
      description: >-
        Abstracts a user containing info about the followers, following,
        username, and a list of users banned
      type: object
      properties:
        userName:
          type: string
          minLength: 0
          maxLength: 999999
          example: jsanclemente
          pattern: ˆ.*?$
          description: Username
        followers:
          type: array
          minItems: 0
          maxItems: 999999
          description: Array of followers of a determinated user
          items:
            type: integer
            description: id of the user
            example: 56
        following:
          type: array
          description: Array with the users followed by the <username> 
          minItems: 0
          maxItems: 999999
          items:
            description: Id of user
            type: integer
            example: 33
        nPhotos:
          description: Number of posts posted by the user
          type: integer
          example: 78
        nFollowers:
          description: Number of followers for the user
          type: integer
          example: 348928
        nFollowing:
          description: Number of following for the user
          type: integer
          example: 9038939
          
    IdUser:
      description: Id for a user in the app
      type: integer
      example: 89
    
    IdPhoto:
      description: Photo identifier
      type: integer
      minimum: 1
      maximum: 9999999
      example: 123456
    nComments:
      description: Represent a number of comments posted for one photo
      type: integer
      minimum: 0
      maximum: 9999999
      example: 123
    nLikes:
      description: Represent a number of likes added for one photo
      type: integer
      minimum: 0
      maximum: 9999999
      example: 123
    Photo:
      description: Represents a photo on the application
      type: object
      properties:
        idPhoto:
          type: integer
          description: Id of a photo
          example: 45
        imageUrl:
          description: Url of the image 
          type: string
          minLength: 0
          maxLength: 999999
          example: http://.../...
          pattern: ˆ.*?$
        userName:
          description: The username that posts the photo
          type: string
          minLength: 0
          maxLength: 999999
          example: jsanclemente
          pattern: ˆ.*?$
        nComments:
          description: Number of comments associated to the photo
          type: integer
          example: 35
        nLikes:
          description: Number of likes associated to the photo
          type: integer
          example: 23455
          
    ListPhotos:
      description: Contains a list of schema "Photos"
      type: array
      minItems: 0
      maxItems: 999999
      items:
        $ref: '#/components/schemas/Photo'
        
security:
  - bearerAuth: []      
paths:
  /users:
    post:
      tags:
        - doLogin
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: Username
              type: object
              properties:
                name:
                  description: name of the user
                  type: string
                  example: Maria
                  pattern: ˆ.*?$
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
          
  /users/{userId}/name:
    parameters:
      - $ref: '#/components/parameters/UserID'
    put:
      operationId: setMyUserName
      tags:
        - User
      summary: Changes the username of a user
      description: Given a username changes the username associated to the user
      requestBody:
        content:
          application/json:
            schema:
              description: Username
              type: string
              minLength: 3
              maxLength: 16
              example: jsanclemente
              pattern: ˆ.*?$
      responses:
        '200':
          description: Returns the old username for the user
          content:
            application/json:
             schema:
              description: Username
              type: string
              minLength: 3
              maxLength: 16
              example: jsanclemente
              pattern: ˆ.*?$
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /photos:
    post:
      operationId: uploadPhoto
      summary: Uploads a photo
      tags:
        - Photo
      description: Returns the identifier of a uploaded photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: Represents a photo posted by user
              properties:
                image:
                  type: string
                  description: Image to post
                  minLength: 0
                  maxLength: 999999
                  format: binary
                idUser:
                  description: The username that posts the photo
                  type: integer
                  example: 55
      responses:
        '201':
          description: Returns the id o a photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdPhoto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
          
          
  /users/{userId}/following/{followedId}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/FollowedId'
    put:
      operationId: followUser
      summary: Follows a user
      tags:
        - Followers
      description: >-
        The user identified as "userId" follows the user identified as
        "followedId". Return the number of followed users by the user
      responses:
        '201':
          description: Returns the number of users followed by the user after the operation
          content:
            application/json:
              schema:
                description: Represent number of users followed
                type: integer
                example: 1234
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: unfollowUser
      summary: Unfollows a user
      description: Returns the number of followed users by the user after the operation
      tags:
        - Followers
      responses:
        '200':
          description: Returns the number of users followed by the user after the operation
          content:
            application/json:
              schema:
                description: Represent number of users followed
                type: integer
                example: 1234
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
          
  /users/{userId}/banned/{bannedId}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/BannedId'
    put:
      operationId: banUser
      summary: Bans a user
      tags:
        - Ban
      description: >-
        The user identified as "userId" bans the user identified "bannedId".
        Returns the number of users banned after the operation
      responses:
        '200':
          description: Returns the number of the banned users after the operation
          content:
            application/json:
              schema:
                description: Represent number of users banned
                type: integer
                example: 78
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: unbanUser
      tags:
        - Ban
      summary: Unbans a user
      description: Return the id of the user unbanned
      responses:
        '200':
          description: Returns the number of the banned users after the operation
          content:
            application/json:
              schema:
                description: Represent number of users banned
                type: integer
                example: 78
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
          
  /photos/{photoId}/likes/{userId}:
    parameters:
      - $ref: '#/components/parameters/PhotoId'
      - $ref: '#/components/parameters/UserID'
    put:
      operationId: likePhoto
      summary: Likes a photo of one user
      description: Likes a photo. Returns the number of likes of the photo after the "like"
      tags:
        - Like
      responses:
        '200':
          description: Number of likes of the post after the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nLikes'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: unlikePhoto
      summary: Unlikes a photo
      description: >-
        Unlikes a photo. Returns the number of likes of the photo after the
        dislike
      tags:
        - Like
      responses:
        '200':
          description: Number of likes of the post after the unlike
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nLikes'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
          
  /photos/{photoId}/comments/{userId}:
    parameters:
      - $ref: '#/components/parameters/PhotoId'
      - $ref: '#/components/parameters/UserID'
    put:
      operationId: commentPhoto
      tags:
        - Comment
      description: >-
        Adds a comment for one post. Return the number of comments after the
        operation.
      summary: Comment a photo
      requestBody:
        content:
          application/json:
            schema:
              description: <username> comments the text <comment>
              type: object
              properties:
                userName:
                  description: name of the user who comments
                  type: string
                  minLength: 3
                  maxLength: 16
                  example: jsanclee
                  pattern: ˆ.*?$
                comment:
                  description: the comment of the post
                  type: string
                  minLength: 0
                  maxLength: 999999
                  example: lovely picture!
                  pattern: ˆ.*?$
      responses:
        '200':
          description: Number of comments on the post after the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nComments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: uncommentPhoto
      summary: Uncomments a photo
      description: >-
        Remove the comment of one post. Return the number of comments after the
        operation
      tags:
        - Comment
      responses:
        '200':
          description: Number of comments on the post after the uncomment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nComments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /photos/{photoId}:
    parameters:
      - $ref: '#/components/parameters/PhotoId'
      - in: query
        name: userId
        description: Id of the user
        schema:
          type: integer
          description: id of the user that deletes the photo
        required: true
    delete:
      operationId: deletePhoto
      summary: Deletes a photo
      description: Delete a photo. Returns the id of the photo deleted
      tags:
        - Photo
      responses:
        '200':
          description: Returns the photo id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdPhoto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /photos/{userId}/:
    parameters:
      - $ref: '#/components/parameters/UserID'
    get:
      operationId: getMyStream
      summary: >-
        Gets the stream of the user. A stream is composed with photos posted by
        the users followed for this user.
      tags:
        - User
      responses:
        '200':
          description: List containing the valid stream for the user
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ListPhotos'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
          
          
  /users/{userId}/:
    parameters:
      - $ref: '#/components/parameters/UserID'
    get:
      operationId: getUserProfile
      tags:
        - User
      summary: Given a user returns the profile of the user
      responses:
        '200':
          description: Returns all the information for one user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
